import BigNum
#if os(Linux)
import Glibc
#else
import Darwin
#endif

print(BigFloat(BigRat(-Double.greatestFiniteMagnitude)))
print(BigFloat(BigRat(-Double.greatestFiniteMagnitude)).asDouble)
print(BigRat(BigFloat(-Double.greatestFiniteMagnitude)))
print(BigRat(BigFloat(-Double.greatestFiniteMagnitude)).asDouble)
print(-Double.greatestFiniteMagnitude)
print(BigFloat(BigRat(-1.0/Double.greatestFiniteMagnitude)))
print(BigFloat(BigRat(-1.0/Double.greatestFiniteMagnitude)).asDouble)
print(BigRat(BigFloat(-1.0/Double.greatestFiniteMagnitude)))
print(BigRat(BigFloat(-1.0/Double.greatestFiniteMagnitude)).asDouble)
print(-1.0/Double.greatestFiniteMagnitude)
print(BigFloat(BigRat(-Double.pi)))
print(BigFloat(BigRat(-Double.pi)).asDouble)
print(-Double.pi)
exit(0)
print("Double")
print(BigFloat(+0.0).asDouble)
print(BigFloat(-0.0).asDouble)
print(BigFloat(+0.5).asDouble)
print(BigFloat(-0.5).asDouble)
print(BigFloat(+1.0).asDouble)
print(BigFloat(-1.0).asDouble)
print(BigFloat(+2.0).asDouble)
print(BigFloat(-2.0).asDouble)
print(BigFloat(+1.5).asDouble)
print(BigFloat(-1.5).asDouble)
print(BigFloat(Double.pi).asDouble)
print(BigFloat(Double.greatestFiniteMagnitude).asDouble)
print(BigFloat(BigInt(1) << 128 - 1).asDouble)
print("Float")
print(BigFloat(Float(+0.0)))
print(BigFloat(Float(-0.0)))
print(BigFloat(Float(+0.5)))
print(BigFloat(Float(-0.5)))
print(BigFloat(Float(+1.0)))
print(BigFloat(Float(-1.0)))
print(BigFloat(Float(+2.0)))
print(BigFloat(Float(-2.0)))
print(BigFloat(Float(+1.5)))
print(BigFloat(Float(-1.5)))
print(Float(BigFloat(Float.pi)))
print(Float(BigFloat(Float.greatestFiniteMagnitude)))
print(Float(BigFloat(BigInt(1) << 128 - 1)))
print("Float80")
print(BigFloat(Float80(+0.0)))
print(BigFloat(Float80(-0.0)))
print(BigFloat(Float80(+0.5)))
print(BigFloat(Float80(-0.5)))
print(BigFloat(Float80(+1.0)))
print(BigFloat(Float80(-1.0)))
print(BigFloat(Float80(+2.0)))
print(BigFloat(Float80(-2.0)))
print(BigFloat(Float80(+1.5)))
print(BigFloat(Float80(-1.5)))
print(Float80(BigFloat(Float80.pi)))
print(Float80(BigFloat(Float80.greatestFiniteMagnitude)))
print(Float80(BigFloat(BigInt(1) << 128 - 1)))



//var dummy:Any = 0
//for i in 0..<256 {
//    dummy = Float80.exp(Float80(i)/256)
//    dummy = BigRat.exp(BigRat(i)/256)
//    dummy = Double.log(Double(i))
//}
//print(dummy)
